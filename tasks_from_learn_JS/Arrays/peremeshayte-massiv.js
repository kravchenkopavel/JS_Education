/**
 * Created by pavlo.kravchenko on 1/24/2020.
 */
/*Перемешайте массив
 важность: 3
 Напишите функцию shuffle(array), которая перемешивает (переупорядочивает случайным образом) элементы массива.

 Многократные прогоны через shuffle могут привести к разным последовательностям элементов. Например:

 let arr = [1, 2, 3];

 shuffle(arr);
 // arr = [3, 2, 1]

 shuffle(arr);
 // arr = [2, 1, 3]

 shuffle(arr);
 // arr = [3, 1, 2]
 // ...
 Все последовательности элементов должны иметь одинаковую вероятность.
 Например, [1,2,3] может быть переупорядочено как [1,2,3] или [1,3,2], или [3,1,2] и т.д., с равной вероятностью каждого случая.*/

let arr = [1, 2, 3];

function shuffle(arr) {
    arr.sort(() => Math.random() - Math.random());
}

shuffle(arr);

/*Если говорить простыми словами, то sort это «чёрный ящик»: мы бросаем в него массив и функцию сравнения, ожидая получить отсортированный массив.
Но из-за абсолютной хаотичности сравнений чёрный ящик сходит с ума, и как именно он сходит с ума, зависит от конкретной его реализации, которая различна в разных движках JavaScript.

 Есть и другие хорошие способы решить эту задачу. Например, есть отличный алгоритм под названием Тасование Фишера — Йетса.
 Суть заключается в том, чтобы проходить по массиву в обратном порядке и менять местами каждый элемент со случайным элементом, который находится перед ним.

 function shuffle(array) {
 for (let i = array.length - 1; i > 0; i--) {
 let j = Math.floor(Math.random() * (i + 1)); // случайный индекс от 0 до i

 // поменять элементы местами
 // мы используем для этого синтаксис "деструктурирующее присваивание"
 // подробнее о нём - в следующих главах
 // то же самое можно записать как:
 // let t = array[i]; array[i] = array[j]; array[j] = t
 [array[i], array[j]] = [array[j], array[i]];
 }
 }*/